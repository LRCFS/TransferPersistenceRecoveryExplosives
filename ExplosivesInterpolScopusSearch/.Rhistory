a <- nrow(ScopusKeywordNarrowRangeGraph)
while (a>maximum) {
Count <- Count-1
ScopusKeywordNarrowRangeGraph <- top_n(ScopusKeywordTotalCount, Count)
a <- nrow(ScopusKeywordNarrowRangeGraph)
}
# DatasetKeywordNarrowRangeGraph <- subset(DatasetKeywordTotalCount,x>Count)
SubsetScopusKeywordNarrowRangeGraph <-subset(ScopusKeywordYearCount,Keyword %in% ScopusKeywordNarrowRangeGraph$Keyword)
# this is to set the range for the keyword figure
range <- as.numeric(max(SubsetScopusKeywordNarrowRangeGraph$x, na.rm = TRUE))
source("Functions/KeywordRange.R")
#############################################################
#####                      GRAPH                        #####
#############################################################
# Create a new variable from incidence (breaks to be changed to fit Scopus vs. Scopus data)
#Breaks and labels for Scopus
SubsetScopusKeywordNarrowRangeGraph$Incidenceweight <- cut(SubsetScopusKeywordNarrowRangeGraph$x,
breaks = c(BreakRange,max(SubsetScopusKeywordNarrowRangeGraph$x,na.rm=T)),
labels=DatasetRange)
ScopusTopKeywordsGraph <- SubsetScopusKeywordNarrowRangeGraph %>%
# convert state to factor and reverse order of levels
mutate(KeywordsCorrected=factor(Keyword,levels=rev(sort(unique(Keyword))))) %>%
# create a new variable from count
mutate(countfactor=cut(x,breaks=c(BreakRange,max(x,na.rm=T)),
labels=DatasetRange))  %>%
# change level order
mutate(countfactor=factor(as.character(countfactor),levels=rev(levels(countfactor))))
ScopusTopKeywordsGraphReduced <- aggregate(ScopusTopKeywordsGraph[, 1], list(ScopusTopKeywordsGraph$KeywordsCorrected), min)
ScopusTopKeywordsGraph$graphorder <- as.numeric(gsr(ScopusTopKeywordsGraph$KeywordsCorrected,ScopusTopKeywordsGraphReduced$Group.1,ScopusTopKeywordsGraphReduced$x))
# further modified ggplot
ScopusKeywordPlot <- ggplot(ScopusTopKeywordsGraph,aes(x=Year,y=reorder(KeywordsCorrected,graphorder),fill=countfactor))+
geom_tile(colour="white",size=0.2)+
guides(fill=guide_legend(title="Count"))+
labs(x="Year",y="",title="")+
scale_y_discrete(expand=c(0,0))+
scale_x_continuous(breaks=c(1960,1970,1980,1990,2000,2010,2020))+
scale_fill_manual(values=c(pal),na.value = "grey90")+
#coord_fixed()+
theme_grey(base_size=6)+
theme(text = element_text(family = "sans"),
legend.position="right",legend.direction="vertical",
legend.title=element_text(colour=textcol),
legend.margin=margin(grid::unit(0,"cm")),
legend.text=element_text(colour=textcol,size=6),
legend.key.height=grid::unit(0.8,"cm"),
legend.key.width=grid::unit(0.2,"cm"),
axis.text.x=element_text(size=6,colour=textcol),
axis.text.y=element_text(size=6,vjust=0.2,colour=textcol),
axis.ticks=element_line(size=0.4),
plot.background=element_blank(),  # element_rect(fill, colour, size, linetype, color))
panel.border=element_blank(),
plot.margin=margin(0.2,0.2,0.2,0.2,"cm"),
plot.title=element_text(colour=textcol,hjust=0,size=6))
#save figure
Var1 <- paste0("Fig_1_Scopus_",KeywordEntries)
ggsave(paste0(Figure.dir,sprintf("%s.tiff",Var1)), ScopusKeywordPlot, width = 14, height = 20, units = "cm", dpi=600)
show(ScopusKeywordPlot)
#Export to top keywords list
write.csv(SubsetScopusKeywordNarrowRangeGraph, file=paste0(Results.dir,sprintf("%s.csv",Var1)), row.names = F)
print("Processing complete. Please check 'Results/' and 'Figures/' folders for output")
#######################################################
######                 Keywords                  ######
#######################################################
#######################################################
######          INTERPOL Reference List          ######
######              Figure 1                     ######
#######################################################
#####                 INTERPOL Data               #####
Interpol_Fig2_Data <- Interpol_data
#############################################################
#####               Data analysis - Keywords            #####
#############################################################
#Count to number of time the same year is repeated in the "DatasetKeywordList$Year" and save in a data.frame "Year"
InterpolPublicationYear<- data.frame(table(Interpol_Fig2_Data$Year))
names(InterpolPublicationYear) <- c("Year","Publications")
InterpolPublicationYear$Year <- as.numeric(as.character(InterpolPublicationYear$Year))
#count the number of keywords per title paper
InterpolKeywordList_KeywordsPerTitle <- InterpolKeywordList  %>%
select(Year,Title,Source.title,KeywordsCorrected) %>%
distinct()
InterpolKeywordList_KeywordsPerTitle[InterpolKeywordList_KeywordsPerTitle==""] <- NA
InterpolKeywordList_KeywordsPerTitle <-InterpolKeywordList_KeywordsPerTitle[complete.cases(InterpolKeywordList_KeywordsPerTitle), ]
#sum(is.na(InterpolKeywordList$KeywordsCorrected))
InterpolKeywordYearCount <- aggregate(InterpolKeywordList_KeywordsPerTitle$Year, by=list(Year=InterpolKeywordList_KeywordsPerTitle$Year, Keyword=InterpolKeywordList_KeywordsPerTitle$KeywordsCorrected), FUN=length)
InterpolKeywordTotalCount <- aggregate(InterpolKeywordList_KeywordsPerTitle$Year, by=list(Keyword=InterpolKeywordList_KeywordsPerTitle$KeywordsCorrected), FUN=length)
# narrowing range for plot
InterpolKeywordNarrowRangeGraph <- top_n(InterpolKeywordTotalCount, Count)
# count the number of rows, hence the number of keywords in figure
a <- nrow(InterpolKeywordNarrowRangeGraph)
while (a>maximum) {
Count <- Count-1
InterpolKeywordNarrowRangeGraph <- top_n(InterpolKeywordTotalCount, Count)
a <- nrow(InterpolKeywordNarrowRangeGraph)
}
# DatasetKeywordNarrowRangeGraph <- subset(DatasetKeywordTotalCount,x>Count)
SubsetInterpolKeywordNarrowRangeGraph <-subset(InterpolKeywordYearCount,Keyword %in% InterpolKeywordNarrowRangeGraph$Keyword)
# this is to set the range for the keyword figure
range <- as.numeric(max(SubsetInterpolKeywordNarrowRangeGraph$x, na.rm = TRUE))
source("Functions/KeywordRange.R")
#############################################################
#####                      GRAPH                        #####
#############################################################
# Create a new variable from incidence (breaks to be changed to fit Interpol vs. Scopus data)
#Breaks and labels for Interpol
SubsetInterpolKeywordNarrowRangeGraph$Incidenceweight <- cut(SubsetInterpolKeywordNarrowRangeGraph$x,
breaks = c(BreakRange,max(SubsetInterpolKeywordNarrowRangeGraph$x,na.rm=T)),
labels=DatasetRange)
InterpolTopKeywordsGraph <- SubsetInterpolKeywordNarrowRangeGraph %>%
# convert state to factor and reverse order of levels
mutate(KeywordsCorrected=factor(Keyword,levels=rev(sort(unique(Keyword))))) %>%
# create a new variable from count
mutate(countfactor=cut(x,breaks=c(BreakRange,max(x,na.rm=T)),
labels=DatasetRange))  %>%
# change level order
mutate(countfactor=factor(as.character(countfactor),levels=rev(levels(countfactor))))
InterpolTopKeywordsGraphReduced <- aggregate(InterpolTopKeywordsGraph[, 1], list(InterpolTopKeywordsGraph$KeywordsCorrected), min)
InterpolTopKeywordsGraph$graphorder <- as.numeric(gsr(InterpolTopKeywordsGraph$KeywordsCorrected,InterpolTopKeywordsGraphReduced$Group.1,InterpolTopKeywordsGraphReduced$x))
# further modified ggplot
InterpolKeywordPlot <- ggplot(InterpolTopKeywordsGraph,aes(x=Year,y=reorder(KeywordsCorrected,graphorder),fill=countfactor))+
geom_tile(colour="white",size=0.2)+
guides(fill=guide_legend(title="Count"))+
labs(x="Year",y="",title="")+
scale_y_discrete(expand=c(0,0))+
scale_x_continuous(breaks=c(2000,2005,2010,2015,2020))+
scale_fill_manual(values=c(pal),na.value = "grey90")+
theme_grey(base_size=6)+
theme(text = element_text(family = "sans"),
legend.position="right",legend.direction="vertical",
legend.title=element_text(colour=textcol),
legend.margin=margin(grid::unit(0,"cm")),
legend.text=element_text(colour=textcol,size=6),
legend.key.height=grid::unit(0.8,"cm"),
legend.key.width=grid::unit(0.2,"cm"),
axis.text.x=element_text(size=6,colour=textcol),
axis.text.y=element_text(size=6,vjust=0.2,colour=textcol),
axis.ticks=element_line(size=0.4),
plot.background=element_blank(),  # element_rect(fill, colour, size, linetype, color))
panel.border=element_blank(),
plot.margin=margin(0.2,0.2,0.2,0.2,"cm"),
plot.title=element_text(colour=textcol,hjust=0,size=6))
#save figure
Var1 <- paste0("Fig_2_INTERPOL_",KeywordEntries)
ggsave(paste0(Figure.dir,sprintf("%s.tiff",Var1)), InterpolKeywordPlot, width = 14, height = 20, units = "cm", dpi=600)
show(InterpolKeywordPlot)
#Export to top keywords list
write.csv(SubsetInterpolKeywordNarrowRangeGraph, file=paste0(Results.dir,sprintf("%s.csv",Var1)), row.names = F)
print("Processing complete. Please check 'Results/' and 'Figures/' folders for output")
#######################################################
#####       Interpol Explosive Keywords           #####
#####              vs Country Plot                #####
#######################################################
# count the number of records with a match to the explosives reference list
InterpolExplosivesCountryMatches <- InterpolExplosives
# replace blank with NA and remove
InterpolExplosivesCountryMatches[InterpolExplosivesCountryMatches==""] <- NA
InterpolExplosivesCountryMatches <- InterpolExplosivesCountryMatches[complete.cases(InterpolExplosivesCountryMatches[ ,2]),]
############
#Split Column "Country" in row by the separator ",", remove leading white space to generate list
InterpolKeywordIndividualCountries <- InterpolExplosivesCountryMatches %>%
mutate(Country = strsplit(as.character(Country), ",")) %>%
unnest(Country) %>%
mutate_if(is.character, str_trim)
#Split Column "Explosive List Corrected" in row by the separator ";", remove leading white space to generate list
InterpolKeywordCountryPairs <- InterpolKeywordIndividualCountries %>%
mutate(Explosive_List_Corrected = strsplit(as.character(Explosive_List_Corrected), ";")) %>%
unnest(Explosive_List_Corrected) %>%
mutate_if(is.character, str_trim)
# replace blank with NA and remove
InterpolKeywordCountryPairs[InterpolKeywordCountryPairs==""] <- NA
InterpolKeywordCountryPairs[InterpolKeywordCountryPairs=="NA"] <- NA
InterpolKeywordCountryPairs <- InterpolKeywordCountryPairs[complete.cases(InterpolKeywordCountryPairs[ ,2]),]
InterpolKeywordCountryPairsReduced <- InterpolKeywordCountryPairs %>%
select(Explosive_List_Corrected,Country)
InterpolKeywordCountryPairCount <- aggregate(InterpolKeywordCountryPairsReduced$Country, by=list(Country=InterpolKeywordCountryPairsReduced$Country, Explosive_List=InterpolKeywordCountryPairsReduced$Explosive_List_Corrected), FUN=length)
# count the number of match to the Explosive_List list per country
InterpolKeywordCountryTotal <- aggregate(InterpolKeywordCountryPairsReduced$Country, by=list(Country=InterpolKeywordCountryPairsReduced$Country), FUN=length)
#select the top 25 countries with the most matching keywords
InterpolKeywordCountryTotal <- top_n(InterpolKeywordCountryTotal,25)
# subset against the top list
InterpolKeywordCountryPairCount <- subset(InterpolKeywordCountryPairCount, Country %in% InterpolKeywordCountryTotal$Country)
##################################################################
# select one of the two possible display for match to Explosive_List #
##################################################################
##### Either combined across all countries together
# This will include the top n countries with the highest number of Explosive_List match. This is different from the country map output as this would include all records regardless of match.
# This part is however bias toward country with the highest number of records as they may focus on specific entries
# count the number of match to the Explosive_List
InterpolKeywordCount <- aggregate(InterpolKeywordCountryPairsReduced$Explosive_List_Corrected, by=list(Explosive_List_Corrected = InterpolKeywordCountryPairsReduced$Explosive_List_Corrected), FUN=length)
#select the top 100 Explosive_List appearing in list
InterpolKeywordCount <- top_n(InterpolKeywordCount,50)
#write.csv(InterpolKeywordCount, file = "InterpolKeywordCount.csv", row.names = FALSE)
# subset against the top list
InterpolKeywordCountryPairCountExplosiveSubset <- subset(InterpolKeywordCountryPairCount, Explosive_List %in% InterpolKeywordCount$Explosive_List_Corrected)
##### and by considering the top match of each country separately before merging together
# This part instead consider the top n countries and return their individual top n list of explosives reference list. They are then merged together in a list.
InterpolCountrySubset <- InterpolKeywordCountryTotal$Country
# remove existing dataframe that may have been run on previous option selection
if (exists("InterpolKeywordCountryPairsCountSubset")){
rm(InterpolKeywordCountryPairsCountSubset)
}
for (i in 1:length(InterpolCountrySubset)){
InterpolKeywordCountryPairsCount_temp <- InterpolKeywordCountryPairsReduced %>%
filter(Country == InterpolCountrySubset[i])
# count the number of match to the Explosive_List
InterpolKeywordCountryPairsCount_temp <- aggregate(InterpolKeywordCountryPairsCount_temp$Explosive_List_Corrected, by=list(Explosive_List = InterpolKeywordCountryPairsCount_temp$Explosive_List_Corrected), FUN=length)
#select the top 100 Explosive_List appearing in list
InterpolKeywordCountryPairsCount_temp <- top_n(InterpolKeywordCountryPairsCount_temp,3)
InterpolKeywordCountryPairsCount_temp$Country <- InterpolCountrySubset[i]
InterpolKeywordCountryPairsCount_temp <- InterpolKeywordCountryPairsCount_temp %>%
select(Country,Explosive_List,x)
# if the merged dataset doesn't exist, create it
if (!exists("InterpolKeywordCountryPairsCountSubset")){
InterpolKeywordCountryPairsCountSubset <- InterpolKeywordCountryPairsCount_temp
# if the merged dataset does exist, append to it
}else {InterpolKeywordCountryPairsCountSubset <-rbind(InterpolKeywordCountryPairsCountSubset, InterpolKeywordCountryPairsCount_temp)
}
}
############################
##### For top keywords #####
############################
names(InterpolKeywordCountryPairCountExplosiveSubset)[3] <- "Frequency"
InterpolKeywordCountryPairsCountSubset <- full_join(InterpolKeywordCountryPairsCountSubset, InterpolKeywordCountryPairCountExplosiveSubset)
InterpolKeywordCountryPairsCountSubset$x[!is.na(InterpolKeywordCountryPairsCountSubset$x)] <- "black"
InterpolKeywordCountryPairsCountSubset$x[is.na(InterpolKeywordCountryPairsCountSubset$x)] <- "white"
names(InterpolKeywordCountryPairsCountSubset)[3] <- "ColourCode"
InterpolKeywordCountryPairsCountSubset$Country <- as.factor(InterpolKeywordCountryPairsCountSubset$Country)
InterpolKeywordCountryPairsCountSubset$Explosive_List <- as.factor(InterpolKeywordCountryPairsCountSubset$Explosive_List)
# ordering keywords in plot by most frequent across all countries
InterpolKeywordOrder <- aggregate(InterpolKeywordCountryPairsCountSubset$Explosive_List, by=list(InterpolKeywordCountryPairsCountSubset$Explosive_List), FUN=length)
InterpolKeywordCountryPairsCountSubset$InterpolKeywordOrder <-  gsr(as.character(InterpolKeywordCountryPairsCountSubset$Explosive_List),as.character(InterpolKeywordOrder$Group.1),InterpolKeywordOrder$x)
InterpolKeywordCountryPairsCountSubset$InterpolKeywordOrder <- as.numeric(InterpolKeywordCountryPairsCountSubset$InterpolKeywordOrder)
# ordering countries by highest number of keywords
CountryOrder <- aggregate(InterpolKeywordCountryPairsCountSubset$Country, by=list(InterpolKeywordCountryPairsCountSubset$Country), FUN=length)
InterpolKeywordCountryPairsCountSubset$CountryOrder <-  gsr(as.character(InterpolKeywordCountryPairsCountSubset$Country),as.character(CountryOrder$Group.1),CountryOrder$x)
InterpolKeywordCountryPairsCountSubset$CountryOrder <- as.numeric(InterpolKeywordCountryPairsCountSubset$CountryOrder)
#############################################################
#####                      GRAPH                        #####
#############################################################
# this is to set the range for the keyword figure
InterpolKeywordCountryPairsCountSubset$groups <- cut(InterpolKeywordCountryPairsCountSubset$Frequency,               # Add group column
breaks = c(-1, 0, 1, 2, 5, 10, 50, 100, max(InterpolKeywordCountryPairsCountSubset$Frequency,na.rm = T)),
labels=c("0","1","2","3-5","6-10","11-50","51-100",">100"))
InterpolExplosivesbyCountry_Graph <- InterpolKeywordCountryPairsCountSubset %>%
# convert state to factor and reverse order of levels
mutate(KeywordsCorrected=factor(Explosive_List,levels=rev(sort(unique(Explosive_List))))) %>%
# create a new variable from count
mutate(countfactor=cut(Frequency,breaks=c(-1, 0, 1, 2, 5, 10, 50, 100, max(Frequency,na.rm = T)),
labels=c("0","1","2","3-5","6-10","11-50","51-100",">100")))  %>%
# change level order
mutate(countfactor=factor(as.character(countfactor),levels=rev(levels(countfactor))))
# InterpolInterpolKeywordCountryPairs$WYear <- gsr(InterpolInterpolKeywordCountryPairs$Year,year$Var1,1/year$Freq)
# Change the name back to the their format in ExplosiveProperName
InterpolExplosivesbyCountry_Graph$ExplosiveProperName <- InterpolExplosivesbyCountry_Graph$Explosive_List
InterpolExplosivesbyCountry_Graph$ExplosiveProperName <- gsr(as.character(InterpolExplosivesbyCountry_Graph$ExplosiveProperName),as.character(ExplosiveList$Uncorrected.Explosive),as.character(ExplosiveList$Corrected.Explosive))
InterpolKeywordOrder <- InterpolKeywordOrder %>%
arrange(desc(x),(Group.1))
InterpolKeywordOrder$Colour <- InterpolKeywordOrder$Group.1
InterpolKeywordOrder$Colour <- gsr(as.character(InterpolKeywordOrder$Colour),as.character(ExplosiveList$Corrected.Explosive),as.character(ExplosiveList$Colour))
# write.csv(InterpolExplosivesbyCountry_Graph,file = "temp.csv",row.names = FALSE)
textcol <- "black"
InterpolExplosivesbyCountryPlot <- ggplot(InterpolExplosivesbyCountry_Graph,aes(x=reorder(Country, CountryOrder),y=reorder(ExplosiveProperName,desc(InterpolKeywordOrder)),fill=countfactor))+
geom_tile(colour=InterpolExplosivesbyCountry_Graph$ColourCode,width=0.85, height=0.85, size=0.3) +
guides(fill=guide_legend(title="Count")) +
scale_fill_manual(values=c("#d53e4f","#f46d43","#fdae61","#fee08b","#d5ee52","#77c86c","#66afc6","#ddf1da", "#8968CD"),na.value = "grey90") +
theme(text = element_text(family = "sans"),
legend.position="right",legend.direction="vertical",
legend.title=element_text(colour=textcol,size=6),
legend.margin=margin(grid::unit(0,"cm")),
legend.text=element_text(colour=textcol,size=6),
legend.key.height=grid::unit(0.8,"cm"),
legend.key.width=grid::unit(0.2,"cm"),
axis.text.y=element_text(size=6, vjust=0.2, colour=InterpolKeywordOrder$Colour),
axis.ticks=element_line(size=0.4),
plot.background=element_blank(),
panel.border=element_blank(),
plot.margin=margin(0.2,0.2,0.2,0.2,"cm"),
plot.title=element_text(colour=textcol,hjust=0,size=6),
axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(size=6, angle = 60, hjust=1, colour="black"))
show(InterpolExplosivesbyCountryPlot)
#save figure
Var1 <- paste0("Fig_3_Interpol_Explosive_Country")
ggsave(paste0(Figure.dir,sprintf("%s.tiff",Var1)), InterpolExplosivesbyCountryPlot, width = 14, height = 15, units = "cm", dpi=600)
print("Processing complete. Please check 'Figures/' folder for output")
#######################################################
#####           Interpol Full Text                #####
#####           Explosive Keywords                #####
#######################################################
names(ExplosivesCountSubset)[2] <- "Explosives from Full Text"
names(ExplosivesCountSubset)[3] <- "Explosives from Abstract, Title, and Keywords"
names(ExplosivesCountSubset)[4] <- "Explosives that make up more than % of mentions"
ExplosivesCountSubsetGraph <- ExplosivesCountSubset %>%
pivot_longer(cols=c("Explosives from Full Text", "Explosives from Abstract, Title, and Keywords"),
names_to="Source", values_to="Count")
ExplosivesCountSubsetGraph$Source <- factor(ExplosivesCountSubsetGraph$Source, levels = c("Explosives from Full Text", "Explosives from Abstract, Title, and Keywords"))
ExplosivesCountSubsetGraph <- subset(ExplosivesCountSubsetGraph, Source %in% c("Explosives from Full Text","Explosives from Abstract, Title, and Keywords"))
TopExplosivesOrder <- ExplosivesCountSubset %>%
arrange(desc(`Explosives from Full Text`),(Explosive))
######## Graph ########
ExplosivesMentionsbySource <- ggplot(ExplosivesCountSubsetGraph)+
geom_point(aes(x=factor(Explosive, levels = TopExplosivesOrder$Explosive), y=Count, color=Source, shape=Source), size=1) +
scale_shape_manual(values = c(15, 17)) +
scale_color_manual(values = c("#969696","#636363"))+
geom_point(aes(x=factor(Explosive, levels = TopExplosivesOrder$Explosive), y=((Ratio+1)*100)), color = "#525252", size=1, shape = 1) +
scale_y_continuous(sec.axis = sec_axis(transform = ~./100-1 , name = "Ratio of Counts"),limits=c(0,200))+
labs(y="Number of Papers")+
theme(legend.position="none",
axis.text.y=element_text(size=6, vjust=0.2),
axis.title.y=element_text(size=6),
axis.ticks=element_line(size=0.4),
plot.background=element_blank(),
panel.border=element_blank(),
plot.margin=margin(0.2,0.2,0.2,0.2,"cm"),
plot.title=element_text(colour=textcol,hjust=0,size=6),
axis.text.x = element_text(size=6, angle = 90, hjust=1),
axis.title.x = element_blank())
show(ExplosivesMentionsbySource)
#save figure
Var1 <- paste0("Fig_4_ExplosivesMentionsbySource")
ggsave(paste0(Figure.dir,sprintf("%s.tiff",Var1)), ExplosivesMentionsbySource, width = 9, height = 12, units = "cm", dpi=600)
print("Processing complete. Please check 'Figures/' folder for output")
###########################################################################
#
# TBC - Copyright (C) 2021
#
# Leverhulme Research Centre for Forensic Science
# Centre for Forensic Science, Department of Pure and Applied Chemistry,
# University of Strathclyde, Royal College, 204 George Street, Glasgow
# Chiron AS, Stiklestadveien 1, NO-7041 Trondheim, Norway
# Caitlyn Norman, Dorothy Xi Yue Lim , Taylor Henderson, Fabio Casali,
# Niamh Nic Daéid, Lorna Nisbet, Hervé Ménard
# Website: https://github.com/HerveMenard/CollaborationNetwork-DrugsEvidence
# Contact: lrc@dundee.ac.uk
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
###########################################################################
# To clean the Global environment
rm(list=ls())
#############################################################
#####                 File requirement                  #####
#############################################################
# The files to be imported are generated from Scopus and Web Of Science databases
# The columns will need to contain:
# Year; Title; Source.title; Authors; AuthorID; DE; DES; EID; SO; DT
#############################################################
#####                 Load Libraries                    #####
#############################################################
library(plyr)
library(dplyr)
library(expss)
library(stringr)
library(tidyr)
library(ggplot2)
library(maps)
library(countrycode)
library(RColorBrewer)
library(tidyverse)
library(reshape2)
library(tikzDevice)
library(Cairo)
library(extrafont)
library(ggmap)
library(mgsub)
library(httr2)
library(pdftools)
library(tm)
# This is computer specific and needs editing to the location of Java.
# This is for computer with limited Admin rights.
# Eclipse Temurin (an OpenJDK distribution from the Adoptium project) is also a great alternative to Java
# Download and install Eclipse Temurin (JDK 8, 11, or later) from: https://adoptium.net/
# Choose JDK (not JRE) and install it.
#
# To make it permanent ( with Admin rights)
# Manually Set JAVA_HOME in Windows:
# Open Control Panel → System → Advanced system settings.
# Click Environment Variables.
# Under System Variables, click New, and add:
# Variable name: JAVA_HOME
# Variable value: C:\Program Files\Eclipse Adoptium\jdk-XX.X.X (Replace with your installed path)
# Find the Path variable under System Variables, click Edit, and add:
# C:\Program Files\Eclipse Adoptium\jdk-XX.X.X\bin
# Restart your computer to apply the changes.
#
Sys.setenv(JAVA_HOME = "C:/Program Files/Eclipse Adoptium/jdk-23.0.2.7-hotspot") # This ensures JAVA_HOME is set for the entire R session
# to edit .Renviron in R:
# file.edit("~/.Renviron")
# Save and restart R to apply changes automatically at each session start.
library(rJava)
library(RWeka)
library(ggtext)
library(ggsci)
#############################################################
#####                Load Functions                     #####
#############################################################
source("Functions/SearchAndReplace.R")
# function to replace accented characters with unaccented equivalents
# adapted from https://stackoverflow.com/questions/15253954/replace-multiple-letters-with-accents-with-gsub
removeDiacritics <- function(string) {
chartr(
"ŠŽšžŸÀÁÂÃÄÅÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝàáâãäåçèéêëìíîïðñòóôõöøùúûüýÿ",
"SZszYAAAAAACEEEEIIIIDNOOOOOOUUUUYaaaaaaceeeeiiiidnoooooouuuuyy",
string
)
}
#############################################################
#####          Create Folders and Filenames             #####
#############################################################
# set extension and Citation
extension <- ".csv"
cit.path.INTERPOL <- "INTERPOL/"
cit.path.SCOPUS <- "Scopus/"
# where the generated figures are saved, create folder if not existing
Results.dir <- "Results/"
if (!dir.exists("Results/")){
dir.create(file.path(Results.dir),recursive = TRUE)
}
Figure.dir <- "Figures/"
if (!dir.exists("Figures/")){
dir.create(file.path(Figures.dir),recursive = TRUE)
}
Papers.dir <- "Papers/"
if (!dir.exists("Papers/")){
dir.create(file.path(Figures.dir),recursive = TRUE)
}
# filename for figure export
FigureName <- "Fig1_Scopus_Keyword_"
TableName <- "Table1_Scopus_Keyword_"
#############################################################
#####                    Load Countries                 #####
#############################################################
# get city/country data
data(world.cities)
#############################################################
##### Country and Institution figures
# Number of individual country appearing on the figures
NumberCountry <- 20
#############################################################
#####     This section is used to determine which       #####
#####           keywords will be searched               #####
#############################################################
#     Select one of the following three options
KeywordEntries <- "Author_Keywords"
# KeywordEntries <- "Database_Keywords"
# KeywordEntries <- "All_Keywords"
#############################################################
#####                  Data cleansing                   #####
#############################################################
#Correction to the keywords can be applied at this stage. This can be done in Notepad++, Excel etc. The ultimate order of the list must be kept so it can be binded to the orignial data.
#read the corrected list of keywords and combine it to the original list
#Load Keyword correction list
KeywordCorrectionList <- read.csv("CorrectionLists/KeywordsCorrectionFull.txt", sep="\t", header=TRUE)
KeywordCorrectionList <- as.data.frame(KeywordCorrectionList)
#############################################################
#####           Load Explosive Corpus                   #####
#############################################################
# Load the Corpus of interest to search in the Interpol output entries
ExplosiveList <- read.csv("ExplosiveDatabase.csv", header = TRUE)
ExplosiveList$UncorrectedNoSpecials <- ExplosiveList$Uncorrected.Explosive
ExplosiveList$UncorrectedNoSpecials <- paste0(" ", ExplosiveList$UncorrectedNoSpecials)
ExplosiveList$UncorrectedNoSpecials<- gsub('[^[:alnum:] ]', ' ', ExplosiveList$UncorrectedNoSpecials)
ExplosiveList$UncorrectedNoSpecials <- gsub("\\s+", " ", ExplosiveList$UncorrectedNoSpecials)
# Remove trailing (right) whitespace and make lowercase
ExplosiveList$UncorrectedNoSpecials <- trimws(ExplosiveList$UncorrectedNoSpecials, which = c("right"))
ExplosiveList$UncorrectedNoSpecials <- toupper(ExplosiveList$UncorrectedNoSpecials)
ExplosiveList$UncorrectedNoSpaces <- ExplosiveList$UncorrectedNoSpecials
ExplosiveList$UncorrectedNoSpaces <- trimws(ExplosiveList$UncorrectedNoSpaces, which = c("both"))
ExplosiveList$Colour <- ExplosiveList$No.Practical.Use.
ExplosiveList$Colour <-gsub('No Practical Use','tomato',ExplosiveList$Colour)
ExplosiveList$Colour <- replace_na(ExplosiveList$Colour,'black')
# Convert to Object
ExplosiveListString <- ExplosiveList$UncorrectedNoSpecials
#Get distinct explosives list
ExplosiveListDistinct <- data.frame(ExplosiveList$Corrected.Explosive) %>%
distinct()
#############################################################
#####           Figure Settings                         #####
#############################################################
#############################################################
##### Figure colours
# assign text colour
textcol <- "black"
#############################################################
##### Keyword Figures
# the number of keywords (top most frequent) appearing in the figure
number <- 100   # target number of keywords apearing in the keyword figure
maximum <- 105  # maximum number of keywords appearing in the keyword figure
# colour palette for the Keyword figure
pal <- c("#990000","#FF5D00","#FFB900","#FFFF00","#ACFF00","#00CC00","#33FFFF","#008BFF","#0000FF","#8968CD","#551A8B")
#############################################################
#####  This is the code for generating Keyword figures  #####
#############################################################
# for (file in filenames){
# # remove the extension and path of the file in column reference
#   name <- gsub(extension, "", file)
name <- "_Scopus"
Count <- number
if (file.exists("SCOPUS/SCOPUS_Combined.csv",recursive = TRUE)){
print("SCOPUS data already combined")
Scopus_data <- read.csv(file = "SCOPUS/SCOPUS_Combined.csv")
}else{Scopus_data <- list.files(cit.path.SCOPUS, pattern=extension, full.names=TRUE)
Scopus_data <- rbindlist(lapply(Scopus_data,fread, encoding='UTF-8'))
write.csv(Scopus_data,file = "SCOPUS/SCOPUS_Combined.csv",row.names = TRUE)
print("SCOPUS data has been combined")
Scopus_data <- read.csv(file = "SCOPUS/SCOPUS_Combined.csv")
}
