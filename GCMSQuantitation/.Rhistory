left=5, right=350, lwin=5, rwin=350)
#baseline.peakDetection <- baseline(tempFileDataTICmatrix[1,, drop=FALSE], method='rollingBall',  wm=150, ws=40)
# extract the corrected spectra
tempFileCorrected <- baseline.peakDetection@corrected
# convert to dataframe and transpose to 1 column
tempFileCorrected <- as.data.frame(t(as.data.frame(tempFileCorrected)))
# rename column to Corrected
names(tempFileCorrected)[1] <- "CorrectedTrend"
# extract the baseline
tempFileBaseline <- baseline.peakDetection@baseline
# convert to dataframe and transpose to 1 column
tempFileBaseline <- as.data.frame(t(as.data.frame(tempFileBaseline)))
# rename column to BaselineTrend
names(tempFileBaseline)[1] <- "BaselineTrend"
Combined.bc.fillPeak <- cbind(fileTIC,tempFileCorrected, tempFileBaseline)
names(Combined.bc.fillPeak)[1] <- "RetentionTime"
Combined.bc.fillPeak$Subtracted <- Combined.bc.fillPeak$TIC-Combined.bc.fillPeak$BaselineTrend
# Plot it
p <- ggplot(Combined.bc.fillPeak, aes(x=RetentionTime)) +
geom_line(aes(y = TIC, colour = "GC trace")) +
geom_line(aes(y = BaselineTrend, colour = "baseline")) +
ylim(30000,50000) +
xlim(150,600)
show(p)
# When running single file don't run line below (skip to ggsave)
#  GcDataName <- gsub('.{4}$', '', GcDataName)
ggsave(
sprintf("%s_BL.tiff",GcDataName),
plot = p,
device = NULL,
path = file.path(GCSampleTrace.dir),
scale = 1,
width = 7.5,
height = 5.0,
units = c("in"),
dpi = 300,
limitsize = TRUE
)
# Plot it
p <- ggplot(Combined.bc.fillPeak, aes(x=RetentionTime)) +
geom_line(aes(y = TIC, colour = "GC trace")) +
geom_line(aes(y = BaselineTrend, colour = "baseline")) +
ylim(0,50000) +
xlim(150,600)
show(p)
# Plot it
p <- ggplot(Combined.bc.fillPeak, aes(x=RetentionTime)) +
geom_line(aes(y = TIC, colour = "GC trace")) +
geom_line(aes(y = BaselineTrend, colour = "baseline")) +
ylim(20000,50000) +
xlim(150,600)
show(p)
# When running single file don't run line below (skip to ggsave)
#  GcDataName <- gsub('.{4}$', '', GcDataName)
ggsave(
sprintf("%s_BL.tiff",GcDataName),
plot = p,
device = NULL,
path = file.path(GCSampleTrace.dir),
scale = 1,
width = 7.5,
height = 5.0,
units = c("in"),
dpi = 300,
limitsize = TRUE
)
file=filenameGcData[[9]]
GcDataName <- gsub(extensionCSV, "", file)
# for testing code on a single file (first on list) in filenameGcDataConverterMs
# GcDataName <- gsub(extensionCSV, "", filenameGcData[3])
GcDataName <- gsub(".*/", "", GcDataName)
File <- GcDataName
# for testing code on a single file (first on list) in filenameGcDataConverterMs
#GcDataCodeOrdered <- read.csv2(filenameGcData[14], sep = ",", header = TRUE)
GcDataCodeOrdered <- read.csv2(file, sep = ",", header = TRUE)
GcDataCodeOrdered <- mutate_all(GcDataCodeOrdered, function(x) as.numeric(as.character(x)))
#########################################################
####### filter data according to threshold value  #######
#########################################################
# # determine mass peak intensity per group
# DataHeatMap <- DataHeatMap %>%
#   group_by(RTime) %>%
#   mutate(freq = Intensity / sum(Intensity))
#
# # scale TIC intensity 0 to 1
# DataHeatMap$TICfreqScaled <- rescale(DataHeatMap$TIC)
#
# # filter values higher than threshold
# DataHeatMapThreshold <- DataHeatMap %>%
#   filter(TICfreqScaled >= threshold)
#
# #plot figure including all data
# p <- ggplot(DataHeatMapThreshold, aes(RTime, Mass))+
#   geom_tile(aes(fill = Intensity))
# show(p)
#
#########################################################
#######           calculate TIC peak areas        #######
#########################################################
DataTicRentention <- GcDataCodeOrdered %>%
select(RetentionTime, TIC) %>%
distinct()
# DataTicRentention <- DataTicRentention %>%
#   filter(RetentionTime > 365 & RetentionTime < 750)
# # plot figure including all data
p <- ggplot(DataTicRentention, aes(RetentionTime, TIC))+
geom_line() +  #ylim(0,100000) +
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs (x ="Retention Time (s)", y = "Abundance")
show(p)
ggsave(
sprintf("%s_BL.tiff",GcDataName),
plot = p,
device = NULL,
path = file.path(GCSampleTrace.dir),
scale = 1,
width = 7.5,
height = 5.0,
units = c("in"),
dpi = 300,
limitsize = TRUE
)
# smoothDataLowess <- data.frame(lowess(DataTicRentention$RetentionTime,DataTicRentention$TIC, f=0.001))
# p <- ggplot(smoothDataLowess, aes(x, y))+
#   geom_line()+ ylim(0,100000)
# show(p)
# rolling average accross the data, value set in Global
smoothData <- DataTicRentention %>%
select(RetentionTime, TIC) %>%
mutate(srate_ma02 = rollmean(TIC, k = rolling.average, fill = NA))
DataTicRentention <- smoothData %>%
select(RetentionTime, TIC=srate_ma02)
DataTicRentention <- na.omit(DataTicRentention)
#  p <- smoothData %>%
#    gather(metric, value, TIC:srate_ma09) %>%
#    ggplot(aes(RetentionTime, value, color = metric)) +
#    geom_line() + ylim(0,25000) +xlim(600,620)
#
#  show(p)
#
# smooth.repeat <- 1
# while (smooth.repeat <= smooth.loop){
#  smoothData <- data.frame(
#   RetentionTime = as.vector(DataTicRentention$RetentionTime),
#   TIC = as.vector(smooth(DataTicRentention$TIC)))
#  DataTicRentention <- smoothData
#  smooth.repeat <- smooth.repeat + 1
# }
# plot figure including all data
# p <- ggplot(DataTicRentention, aes(RetentionTime, TIC))+
#   geom_line()+ ylim(0,25000)
# show(p)
# smoothingSpline = smooth.spline(DataTicRentention$RetentionTime, smooth(DataTicRentention$TIC, spar=0.35))
########################################################
#######    baseline corrections using hyperSpec  #######
########################################################
# baseline corrections adapted from and using the library package hyperSpec
# for more information: https://cran.r-project.org/web/packages/hyperSpec/index.html
# the data must be in hyperspectral format (this could be extended to creating matrix of data)
# convert data to hyperSpec format
fileTIC <- as.data.frame(DataTicRentention)
tempFileDataTIC <- fileTIC$TIC
tempFileDataTIC <- as.data.frame(t(as.data.frame(tempFileDataTIC)))
tempFileDataTICmatrix <-data.matrix(tempFileDataTIC)
# Description
# A translation from Kevin R. Coombes et al.’s MATLAB code for detecting peaks and removing
# baselines
# https://cran.r-project.org/web/packages/baseline/baseline.pdf
# method should be: “als”, “fillPeaks”, “irls”, “lowpass”, “medianWindow”, “modpolyfit”, “peakDetection”, “rfbaseline”, “rollingBall”, “shirley”, “TAP”
baseline.peakDetection <- baseline(tempFileDataTICmatrix[1,, drop=FALSE], method='peakDetection', snminimum=100,
left=5, right=350, lwin=5, rwin=350)
#baseline.peakDetection <- baseline(tempFileDataTICmatrix[1,, drop=FALSE], method='rollingBall',  wm=150, ws=40)
# extract the corrected spectra
tempFileCorrected <- baseline.peakDetection@corrected
# convert to dataframe and transpose to 1 column
tempFileCorrected <- as.data.frame(t(as.data.frame(tempFileCorrected)))
# rename column to Corrected
names(tempFileCorrected)[1] <- "CorrectedTrend"
# extract the baseline
tempFileBaseline <- baseline.peakDetection@baseline
# convert to dataframe and transpose to 1 column
tempFileBaseline <- as.data.frame(t(as.data.frame(tempFileBaseline)))
# rename column to BaselineTrend
names(tempFileBaseline)[1] <- "BaselineTrend"
Combined.bc.fillPeak <- cbind(fileTIC,tempFileCorrected, tempFileBaseline)
names(Combined.bc.fillPeak)[1] <- "RetentionTime"
Combined.bc.fillPeak$Subtracted <- Combined.bc.fillPeak$TIC-Combined.bc.fillPeak$BaselineTrend
# Plot it
p <- ggplot(Combined.bc.fillPeak, aes(x=RetentionTime)) +
geom_line(aes(y = TIC, colour = "GC trace")) +
geom_line(aes(y = BaselineTrend, colour = "baseline")) +
ylim(20000,50000) +
xlim(150,600)
show(p)
# When running single file don't run line below (skip to ggsave)
#  GcDataName <- gsub('.{4}$', '', GcDataName)
ggsave(
sprintf("%s_BL.tiff",GcDataName),
plot = p,
device = NULL,
path = file.path(GCSampleTrace.dir),
scale = 1,
width = 7.5,
height = 5.0,
units = c("in"),
dpi = 300,
limitsize = TRUE
)
# Plot it
p <- ggplot(Combined.bc.fillPeak, aes(x=RetentionTime)) +
geom_line(aes(y = TIC, colour = "GC trace")) +
geom_line(aes(y = BaselineTrend, colour = "baseline")) +
ylim(10000,50000) +
xlim(150,600)
show(p)
# Plot it
p <- ggplot(Combined.bc.fillPeak, aes(x=RetentionTime)) +
geom_line(aes(y = TIC, colour = "GC trace")) +
geom_line(aes(y = BaselineTrend, colour = "baseline")) +
ylim(10000,20000) +
xlim(150,600)
show(p)
file=filenameGcData[[9]]
GcDataName <- gsub(extensionCSV, "", file)
# for testing code on a single file (first on list) in filenameGcDataConverterMs
# GcDataName <- gsub(extensionCSV, "", filenameGcData[3])
GcDataName <- gsub(".*/", "", GcDataName)
File <- GcDataName
# for testing code on a single file (first on list) in filenameGcDataConverterMs
#GcDataCodeOrdered <- read.csv2(filenameGcData[14], sep = ",", header = TRUE)
GcDataCodeOrdered <- read.csv2(file, sep = ",", header = TRUE)
GcDataCodeOrdered <- mutate_all(GcDataCodeOrdered, function(x) as.numeric(as.character(x)))
#########################################################
####### filter data according to threshold value  #######
#########################################################
# # determine mass peak intensity per group
# DataHeatMap <- DataHeatMap %>%
#   group_by(RTime) %>%
#   mutate(freq = Intensity / sum(Intensity))
#
# # scale TIC intensity 0 to 1
# DataHeatMap$TICfreqScaled <- rescale(DataHeatMap$TIC)
#
# # filter values higher than threshold
# DataHeatMapThreshold <- DataHeatMap %>%
#   filter(TICfreqScaled >= threshold)
#
# #plot figure including all data
# p <- ggplot(DataHeatMapThreshold, aes(RTime, Mass))+
#   geom_tile(aes(fill = Intensity))
# show(p)
#
#########################################################
#######           calculate TIC peak areas        #######
#########################################################
DataTicRentention <- GcDataCodeOrdered %>%
select(RetentionTime, TIC) %>%
distinct()
# DataTicRentention <- DataTicRentention %>%
#   filter(RetentionTime > 365 & RetentionTime < 750)
# # plot figure including all data
p <- ggplot(DataTicRentention, aes(RetentionTime, TIC))+
geom_line() +  #ylim(0,100000) +
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs (x ="Retention Time (s)", y = "Abundance")
show(p)
ggsave(
sprintf("%s_BL.tiff",GcDataName),
plot = p,
device = NULL,
path = file.path(GCSampleTrace.dir),
scale = 1,
width = 7.5,
height = 5.0,
units = c("in"),
dpi = 300,
limitsize = TRUE
)
# smoothDataLowess <- data.frame(lowess(DataTicRentention$RetentionTime,DataTicRentention$TIC, f=0.001))
# p <- ggplot(smoothDataLowess, aes(x, y))+
#   geom_line()+ ylim(0,100000)
# show(p)
# rolling average accross the data, value set in Global
smoothData <- DataTicRentention %>%
select(RetentionTime, TIC) %>%
mutate(srate_ma02 = rollmean(TIC, k = rolling.average, fill = NA))
DataTicRentention <- smoothData %>%
select(RetentionTime, TIC=srate_ma02)
DataTicRentention <- na.omit(DataTicRentention)
#  p <- smoothData %>%
#    gather(metric, value, TIC:srate_ma09) %>%
#    ggplot(aes(RetentionTime, value, color = metric)) +
#    geom_line() + ylim(0,25000) +xlim(600,620)
#
#  show(p)
#
# smooth.repeat <- 1
# while (smooth.repeat <= smooth.loop){
#  smoothData <- data.frame(
#   RetentionTime = as.vector(DataTicRentention$RetentionTime),
#   TIC = as.vector(smooth(DataTicRentention$TIC)))
#  DataTicRentention <- smoothData
#  smooth.repeat <- smooth.repeat + 1
# }
# plot figure including all data
# p <- ggplot(DataTicRentention, aes(RetentionTime, TIC))+
#   geom_line()+ ylim(0,25000)
# show(p)
# smoothingSpline = smooth.spline(DataTicRentention$RetentionTime, smooth(DataTicRentention$TIC, spar=0.35))
########################################################
#######    baseline corrections using hyperSpec  #######
########################################################
# baseline corrections adapted from and using the library package hyperSpec
# for more information: https://cran.r-project.org/web/packages/hyperSpec/index.html
# the data must be in hyperspectral format (this could be extended to creating matrix of data)
# convert data to hyperSpec format
fileTIC <- as.data.frame(DataTicRentention)
tempFileDataTIC <- fileTIC$TIC
tempFileDataTIC <- as.data.frame(t(as.data.frame(tempFileDataTIC)))
tempFileDataTICmatrix <-data.matrix(tempFileDataTIC)
# Description
# A translation from Kevin R. Coombes et al.’s MATLAB code for detecting peaks and removing
# baselines
# https://cran.r-project.org/web/packages/baseline/baseline.pdf
# method should be: “als”, “fillPeaks”, “irls”, “lowpass”, “medianWindow”, “modpolyfit”, “peakDetection”, “rfbaseline”, “rollingBall”, “shirley”, “TAP”
baseline.peakDetection <- baseline(tempFileDataTICmatrix[1,, drop=FALSE], method='peakDetection', snminimum=100,
left=5, right=350, lwin=5, rwin=350)
#baseline.peakDetection <- baseline(tempFileDataTICmatrix[1,, drop=FALSE], method='rollingBall',  wm=150, ws=40)
# extract the corrected spectra
tempFileCorrected <- baseline.peakDetection@corrected
# convert to dataframe and transpose to 1 column
tempFileCorrected <- as.data.frame(t(as.data.frame(tempFileCorrected)))
# rename column to Corrected
names(tempFileCorrected)[1] <- "CorrectedTrend"
# extract the baseline
tempFileBaseline <- baseline.peakDetection@baseline
# convert to dataframe and transpose to 1 column
tempFileBaseline <- as.data.frame(t(as.data.frame(tempFileBaseline)))
# rename column to BaselineTrend
names(tempFileBaseline)[1] <- "BaselineTrend"
Combined.bc.fillPeak <- cbind(fileTIC,tempFileCorrected, tempFileBaseline)
names(Combined.bc.fillPeak)[1] <- "RetentionTime"
Combined.bc.fillPeak$Subtracted <- Combined.bc.fillPeak$TIC-Combined.bc.fillPeak$BaselineTrend
# Plot it
p <- ggplot(Combined.bc.fillPeak, aes(x=RetentionTime)) +
geom_line(aes(y = TIC, colour = "GC trace")) +
geom_line(aes(y = BaselineTrend, colour = "baseline")) +
ylim(10000,20000) +
xlim(150,600)
show(p)
# When running single file don't run line below (skip to ggsave)
#  GcDataName <- gsub('.{4}$', '', GcDataName)
ggsave(
sprintf("%s_BL.tiff",GcDataName),
plot = p,
device = NULL,
path = file.path(GCSampleTrace.dir),
scale = 1,
width = 7.5,
height = 5.0,
units = c("in"),
dpi = 300,
limitsize = TRUE
)
file=filenameGcData[[11]]
GcDataName <- gsub(extensionCSV, "", file)
# for testing code on a single file (first on list) in filenameGcDataConverterMs
# GcDataName <- gsub(extensionCSV, "", filenameGcData[3])
GcDataName <- gsub(".*/", "", GcDataName)
File <- GcDataName
# for testing code on a single file (first on list) in filenameGcDataConverterMs
#GcDataCodeOrdered <- read.csv2(filenameGcData[14], sep = ",", header = TRUE)
GcDataCodeOrdered <- read.csv2(file, sep = ",", header = TRUE)
GcDataCodeOrdered <- mutate_all(GcDataCodeOrdered, function(x) as.numeric(as.character(x)))
#########################################################
####### filter data according to threshold value  #######
#########################################################
# # determine mass peak intensity per group
# DataHeatMap <- DataHeatMap %>%
#   group_by(RTime) %>%
#   mutate(freq = Intensity / sum(Intensity))
#
# # scale TIC intensity 0 to 1
# DataHeatMap$TICfreqScaled <- rescale(DataHeatMap$TIC)
#
# # filter values higher than threshold
# DataHeatMapThreshold <- DataHeatMap %>%
#   filter(TICfreqScaled >= threshold)
#
# #plot figure including all data
# p <- ggplot(DataHeatMapThreshold, aes(RTime, Mass))+
#   geom_tile(aes(fill = Intensity))
# show(p)
#
#########################################################
#######           calculate TIC peak areas        #######
#########################################################
DataTicRentention <- GcDataCodeOrdered %>%
select(RetentionTime, TIC) %>%
distinct()
# DataTicRentention <- DataTicRentention %>%
#   filter(RetentionTime > 365 & RetentionTime < 750)
# # plot figure including all data
p <- ggplot(DataTicRentention, aes(RetentionTime, TIC))+
geom_line() +  #ylim(0,100000) +
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs (x ="Retention Time (s)", y = "Abundance")
show(p)
ggsave(
sprintf("%s_BL.tiff",GcDataName),
plot = p,
device = NULL,
path = file.path(GCSampleTrace.dir),
scale = 1,
width = 7.5,
height = 5.0,
units = c("in"),
dpi = 300,
limitsize = TRUE
)
# smoothDataLowess <- data.frame(lowess(DataTicRentention$RetentionTime,DataTicRentention$TIC, f=0.001))
# p <- ggplot(smoothDataLowess, aes(x, y))+
#   geom_line()+ ylim(0,100000)
# show(p)
# rolling average accross the data, value set in Global
smoothData <- DataTicRentention %>%
select(RetentionTime, TIC) %>%
mutate(srate_ma02 = rollmean(TIC, k = rolling.average, fill = NA))
DataTicRentention <- smoothData %>%
select(RetentionTime, TIC=srate_ma02)
DataTicRentention <- na.omit(DataTicRentention)
#  p <- smoothData %>%
#    gather(metric, value, TIC:srate_ma09) %>%
#    ggplot(aes(RetentionTime, value, color = metric)) +
#    geom_line() + ylim(0,25000) +xlim(600,620)
#
#  show(p)
#
# smooth.repeat <- 1
# while (smooth.repeat <= smooth.loop){
#  smoothData <- data.frame(
#   RetentionTime = as.vector(DataTicRentention$RetentionTime),
#   TIC = as.vector(smooth(DataTicRentention$TIC)))
#  DataTicRentention <- smoothData
#  smooth.repeat <- smooth.repeat + 1
# }
# plot figure including all data
# p <- ggplot(DataTicRentention, aes(RetentionTime, TIC))+
#   geom_line()+ ylim(0,25000)
# show(p)
# smoothingSpline = smooth.spline(DataTicRentention$RetentionTime, smooth(DataTicRentention$TIC, spar=0.35))
########################################################
#######    baseline corrections using hyperSpec  #######
########################################################
# baseline corrections adapted from and using the library package hyperSpec
# for more information: https://cran.r-project.org/web/packages/hyperSpec/index.html
# the data must be in hyperspectral format (this could be extended to creating matrix of data)
# convert data to hyperSpec format
fileTIC <- as.data.frame(DataTicRentention)
tempFileDataTIC <- fileTIC$TIC
tempFileDataTIC <- as.data.frame(t(as.data.frame(tempFileDataTIC)))
tempFileDataTICmatrix <-data.matrix(tempFileDataTIC)
# Description
# A translation from Kevin R. Coombes et al.’s MATLAB code for detecting peaks and removing
# baselines
# https://cran.r-project.org/web/packages/baseline/baseline.pdf
# method should be: “als”, “fillPeaks”, “irls”, “lowpass”, “medianWindow”, “modpolyfit”, “peakDetection”, “rfbaseline”, “rollingBall”, “shirley”, “TAP”
baseline.peakDetection <- baseline(tempFileDataTICmatrix[1,, drop=FALSE], method='peakDetection', snminimum=100,
left=5, right=350, lwin=5, rwin=350)
#baseline.peakDetection <- baseline(tempFileDataTICmatrix[1,, drop=FALSE], method='rollingBall',  wm=150, ws=40)
# extract the corrected spectra
tempFileCorrected <- baseline.peakDetection@corrected
# convert to dataframe and transpose to 1 column
tempFileCorrected <- as.data.frame(t(as.data.frame(tempFileCorrected)))
# rename column to Corrected
names(tempFileCorrected)[1] <- "CorrectedTrend"
# extract the baseline
tempFileBaseline <- baseline.peakDetection@baseline
# convert to dataframe and transpose to 1 column
tempFileBaseline <- as.data.frame(t(as.data.frame(tempFileBaseline)))
# rename column to BaselineTrend
names(tempFileBaseline)[1] <- "BaselineTrend"
Combined.bc.fillPeak <- cbind(fileTIC,tempFileCorrected, tempFileBaseline)
names(Combined.bc.fillPeak)[1] <- "RetentionTime"
Combined.bc.fillPeak$Subtracted <- Combined.bc.fillPeak$TIC-Combined.bc.fillPeak$BaselineTrend
# Plot it
p <- ggplot(Combined.bc.fillPeak, aes(x=RetentionTime)) +
geom_line(aes(y = TIC, colour = "GC trace")) +
geom_line(aes(y = BaselineTrend, colour = "baseline")) +
ylim(10000,20000) +
xlim(150,600)
show(p)
# When running single file don't run line below (skip to ggsave)
#  GcDataName <- gsub('.{4}$', '', GcDataName)
ggsave(
sprintf("%s_BL.tiff",GcDataName),
plot = p,
device = NULL,
path = file.path(GCSampleTrace.dir),
scale = 1,
width = 7.5,
height = 5.0,
units = c("in"),
dpi = 300,
limitsize = TRUE
)
