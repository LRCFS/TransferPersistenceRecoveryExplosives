# #########################################################
# #####                For title                      #####
##############################################
# Check for presence of each word in Title
InterpolTitles <- vector("list", nrow(Interpol_data))
for(d in 1:nrow(Interpol_data)){
for(w in seq_along(SamplingListString)){
intermed   <- grep(SamplingListString[[w]], Interpol_data[[d,"Title"]])
InterpolTitles[[d]] <- c(InterpolTitles[[d]],
SamplingListString[[w]][ (length(intermed) > 0) ])
}
}
# combined together
InterpolSamplingFromTitle    <- sapply(InterpolTitles, paste0, collapse=";")
InterpolSamplingFromTitle <- as.data.frame(InterpolSamplingFromTitle)
InterpolSamplingFromTitle <- data.frame(Interpol_data$Title,InterpolSamplingFromTitle)
# remane fist column to match original dataset
names(InterpolSamplingFromTitle)[1] <- c("Title")
InterpolSamplingFromAbsTitle <- full_join(InterpolSamplingFromAbs,InterpolSamplingFromTitle)
# #########################################################
# #####                For keywords                   #####
##############################################
# Check for presence of each word in Keywords
InterpolKeywords <- vector("list", nrow(Interpol_data))
for(d in 1:nrow(Interpol_data)){
for(w in seq_along(SamplingListString)){
intermed   <- grep(SamplingListString[[w]], Interpol_data[[d,"KeywordsCorrected"]])
InterpolKeywords[[d]] <- c(InterpolKeywords[[d]],
SamplingListString[[w]][ (length(intermed) > 0) ])
}
}
# combined together
InterpolSamplingFromKeyword    <- sapply(InterpolKeywords, paste0, collapse=";")
InterpolSamplingFromKeyword <- as.data.frame(InterpolSamplingFromKeyword)
InterpolSamplingFromKeyword <- data.frame(Interpol_data$Title,InterpolSamplingFromKeyword)
# remane fist column to match original dataset
names(InterpolSamplingFromKeyword)[1] <- c("Title")
InterpolSampling <- full_join(InterpolSamplingFromAbsTitle,InterpolSamplingFromKeyword)
#write.csv(InterpolSampling,file = "InterpolSampling.csv",row.names = TRUE)
############
# Combine Columns Abs,Titles,Keywords and place in Column name "Sampling_List" and remove original columns
InterpolSampling <- InterpolSampling %>%
unite("Sampling_List", c(InterpolSamplingFromAbs), c(InterpolSamplingFromTitle), c(InterpolSamplingFromKeyword),sep = ";", remove = TRUE)
#Split Column "Sampling_List" in row by the separator ";", remove leading white space to generate list
InterpolSampling <- InterpolSampling %>%
mutate(Sampling_List = strsplit(as.character(Sampling_List), ";")) %>%
unnest(Sampling_List) %>%
mutate_if(is.character, str_trim)
# Apply corrections to Interpol Sampling List
#InterpolSampling$Sampling_List_Corrected <- gsr(as.character(InterpolSampling$Sampling_List),as.character(SamplingList$UncorrectedNoSpaces),as.character(SamplingList$Corrected.Sampling))
# Remove duplicates from Sampling list
InterpolSampling <- InterpolSampling %>%
select(Title,Sampling_List)%>%
distinct()
#Group keywords together
InterpolSamplingCollapsed <- InterpolSampling %>%
group_by(Title) %>%
summarize(Sampling_List_Corrected=paste0(Sampling_List, collapse = ";"))
############
# get the Title and respective country names to join to the InterpolSampling
Interpol_Title_Country <- Interpol_data %>%
select(Title,Year,Country)
InterpolSampling <- full_join(InterpolSamplingCollapsed,Interpol_Title_Country, by = "Title")
print('Interpol Sampling Keywords Extracted')
#######################################################
#####       Scopus Sampling Keywords           #####
#######################################################
#######################################################
#######                For abstract               #####
#######################################################
# Check for presence of each word in Abstract
ScopusAbs <- vector("list", nrow(Scopus_data))
for(d in 1:nrow(Scopus_data)){
for(w in seq_along(SamplingListString)){
intermed   <- grep(SamplingListString[[w]], Scopus_data[[d,"Abstract"]])
ScopusAbs[[d]] <- c(ScopusAbs[[d]],
SamplingListString[[w]][ (length(intermed) > 0) ])
}
}
# combined together
ScopusSamplingFromAbs <- sapply(ScopusAbs, paste0, collapse=";")
ScopusSamplingFromAbs <- as.data.frame(ScopusSamplingFromAbs)
ScopusSamplingFromAbs <- data.frame(Scopus_data$EID,ScopusSamplingFromAbs)
# remane fist column to match original dataset
names(ScopusSamplingFromAbs)[1] <- c("EID")
# #########################################################
# #####                For title                      #####
##############################################
# Check for presence of each word in Title
ScopusTitles <- vector("list", nrow(Scopus_data))
for(d in 1:nrow(Scopus_data)){
for(w in seq_along(SamplingListString)){
intermed   <- grep(SamplingListString[[w]], Scopus_data[[d,"Title"]])
ScopusTitles[[d]] <- c(ScopusTitles[[d]],
SamplingListString[[w]][ (length(intermed) > 0) ])
}
}
# combined together
ScopusSamplingFromTitle    <- sapply(ScopusTitles, paste0, collapse=";")
ScopusSamplingFromTitle <- as.data.frame(ScopusSamplingFromTitle)
ScopusSamplingFromTitle <- data.frame(Scopus_data$EID,ScopusSamplingFromTitle)
# remane fist column to match original dataset
names(ScopusSamplingFromTitle)[1] <- c("EID")
ScopusSamplingFromAbsTitle <- full_join(ScopusSamplingFromAbs,ScopusSamplingFromTitle)
# #########################################################
# #####                For keywords                   #####
##############################################
# Check for presence of each word in Keywords
ScopusKeywords <- vector("list", nrow(Scopus_data))
for(d in 1:nrow(Scopus_data)){
for(w in seq_along(SamplingListString)){
intermed   <- grep(SamplingListString[[w]], Scopus_data[[d,"KeywordsCorrected"]])
ScopusKeywords[[d]] <- c(ScopusKeywords[[d]],
SamplingListString[[w]][ (length(intermed) > 0) ])
}
}
# combined together
ScopusSamplingFromKeyword    <- sapply(ScopusKeywords, paste0, collapse=";")
ScopusSamplingFromKeyword <- as.data.frame(ScopusSamplingFromKeyword)
ScopusSamplingFromKeyword <- data.frame(Scopus_data$EID,ScopusSamplingFromKeyword)
# remane fist column to match original dataset
names(ScopusSamplingFromKeyword)[1] <- c("EID")
ScopusSampling <- full_join(ScopusSamplingFromAbsTitle,ScopusSamplingFromKeyword)
############
# Combine Columns Abs,Titles,Keywords and place in Column name "Sampling_List" and remove original columns
ScopusSampling <- ScopusSampling %>%
unite("Sampling_List", ScopusSamplingFromAbs, ScopusSamplingFromTitle, ScopusSamplingFromKeyword,sep = ";", remove = TRUE)
#Split Column "Sampling_List" in row by the separator ";", remove leading white space to generate list
ScopusSampling <- ScopusSampling %>%
mutate(Sampling_List = strsplit(as.character(Sampling_List), ";")) %>%
unnest(Sampling_List) %>%
mutate_if(is.character, str_trim)
# Apply corrections to Scopus Sampling List
#ScopusSampling$Sampling_List_Corrected <- gsr(as.character(ScopusSampling$Sampling_List),as.character(SamplingList$UncorrectedNoSpaces),as.character(SamplingList$Corrected.Sampling))
# Remove duplicates from Sampling list
ScopusSampling <- ScopusSampling %>%
select(EID,Sampling_List)%>%
distinct()
#Group keywords together
ScopusSamplingCollapsed <- ScopusSampling %>%
group_by(EID) %>%
summarize(Sampling_List_Corrected=paste0(Sampling_List, collapse = ";"))
############
# get the Title and respective country names to join to the ScopusSampling
Scopus_Title_Country <- Scopus_data %>%
select(Title,Year,Country,EID)
ScopusSampling <- full_join(ScopusSamplingCollapsed,Scopus_Title_Country, by = "EID")
print('Scopus Sampling Keywords Extracted')
#############################################################
#####                       Codes                       #####
#############################################################
# These codes can be run subsequently or independently
# # Figure 1, Scopus Keywords as a function of year
#source("Code/Figure1_Scopus_Keywords.R")
# # Figure 2, INTERPOL Keywords as a function of year
#source("Code/Figure2_Interpol_Keywords.R")
# # Figure 3, Interpol Sampling Country
#source("Code/Figure3_Interpol_Sampling_Country.R")
# # Figure 4, Full Text Mining Comparison
#source("Code/Figure4_Full_Text_Mining.R")
##Other Code
## To determine the most used journal and download papers using the Wiley API
#source("Code/Journal_Paper_Downloads.R")
## To compare keywords between evidence types
#source("Code/Evidence Comparison.R")
####Unused Figures#####
##To illustrate countries publishing papers included in INTERPOL reviews
#source("Code/Interpol_Country_Affiliation_Figure.R")
##To illustrate countries publishing papers included in Scopus dataset
#source("Code/Scopus_Country_Affiliation_Figure.R")
##To illustrate the most-mentioned Samplings by country in Scopus dataset
#source("Code/Scopus_Sampling_Country_Figure.R")
##To illustrate the occurrence of Samplings by year in INTERPOL reviews
#source("Code/Interpol_Sampling_Year_Figure.R")
##To illustrate the occurrence of Samplings by year in Scopus dataset
#source("Code/Scopus_Sampling_Year_Figure.R")
##To generate a country network from Scopus dataset
# source("Code/Scopus_Country_Network_Figure.R")
##To illustrate the percentage of papers published with international collaboration
#source("Code/Scopus_International_Collaboration_Figure.R")
#######################################################
#####       Interpol Sampling Keywords            #####
#####              vs Country Plot                #####
#######################################################
# count the number of records with a match to the explosives reference list
InterpolSamplingCountryMatches <- InterpolSampling
# replace blank with NA and remove
InterpolSamplingCountryMatches[InterpolSamplingCountryMatches==""] <- NA
InterpolSamplingCountryMatches <- InterpolSamplingCountryMatches[complete.cases(InterpolSamplingCountryMatches[ ,2]),]
############
#Split Column "Country" in row by the separator ",", remove leading white space to generate list
InterpolSamplingIndividualCountries <- InterpolSamplingCountryMatches %>%
mutate(Country = strsplit(as.character(Country), ",")) %>%
unnest(Country) %>%
mutate_if(is.character, str_trim)
#Split Column "Explosive List Corrected" in row by the separator ";", remove leading white space to generate list
InterpolSamplingCountryPairs <- InterpolSamplingIndividualCountries %>%
mutate(Sampling_List = strsplit(as.character(Sampling_List), ";")) %>%
unnest(Sampling_List) %>%
mutate_if(is.character, str_trim)
View(InterpolSamplingIndividualCountries)
############
#Split Column "Country" in row by the separator ",", remove leading white space to generate list
InterpolSamplingIndividualCountries <- InterpolSamplingCountryMatches %>%
mutate(Country = strsplit(as.character(Country), ",")) %>%
unnest(Country) %>%
mutate_if(is.character, str_trim)
#Split Column "Explosive List Corrected" in row by the separator ";", remove leading white space to generate list
InterpolSamplingCountryPairs <- InterpolSamplingIndividualCountries %>%
mutate(Sampling_List_Corrected = strsplit(as.character(Sampling_List_Corrected), ";")) %>%
unnest(Sampling_List_Corrected) %>%
mutate_if(is.character, str_trim)
# replace blank with NA and remove
InterpolSamplingCountryPairs[InterpolSamplingCountryPairs==""] <- NA
InterpolSamplingCountryPairs[InterpolSamplingCountryPairs=="NA"] <- NA
InterpolSamplingCountryPairs <- InterpolSamplingCountryPairs[complete.cases(InterpolSamplingCountryPairs[ ,2]),]
InterpolSamplingCountryPairsReduced <- InterpolSamplingCountryPairs %>%
select(Sampling_List_Corrected,Country)
InterpolSamplingCountryPairCount <- aggregate(InterpolSamplingCountryPairsReduced$Country, by=list(Country=InterpolSamplingCountryPairsReduced$Country, Sampling_List_Corrected=InterpolSamplingCountryPairsReduced$Sampling_List_Corrected), FUN=length)
# count the number of match to the Sampling_List_Corrected list per country
InterpolSamplingCountryTotal <- aggregate(InterpolSamplingCountryPairsReduced$Country, by=list(Country=InterpolSamplingCountryPairsReduced$Country), FUN=length)
#select the top 30 countries with the most matching keywords
InterpolSamplingCountryTotal <- top_n(InterpolSamplingCountryTotal,30)
# subset against the top list
InterpolSamplingCountryPairCount <- subset(InterpolSamplingCountryPairCount, Country %in% InterpolSamplingCountryTotal$Country)
# count the number of match to the Sampling_List_Corrected
InterpolSamplingCount <- aggregate(InterpolSamplingCountryPairsReduced$Sampling_List_Corrected, by=list(Sampling_List_Corrected = InterpolSamplingCountryPairsReduced$Sampling_List_Corrected), FUN=length)
# subset against the top list
InterpolSamplingCountryPairCountKeywordSubset <- subset(InterpolSamplingCountryPairCount, Sampling_List_Corrected %in% InterpolSamplingCount$Sampling_List_Corrected)
# This part instead consider the top n countries and return their individual top n list of explosives reference list. They are then merged together in a list.
InterpolSamplingCountrySubset <- InterpolSamplingCountryTotal$Country
# remove existing dataframe that may have been run on previous option selection
if (exists("InterpolSamplingCountryPairsCountSubset")){
rm(InterpolSamplingCountryPairsCountSubset)
}
for (i in 1:length(InterpolSamplingCountrySubset)){
InterpolSamplingCountryPairsCount_temp <- InterpolSamplingCountryPairsReduced %>%
filter(Country == InterpolSamplingCountrySubset[i])
# count the number of match to the Sampling_List_Corrected
InterpolSamplingCountryPairsCount_temp <- aggregate(InterpolSamplingCountryPairsCount_temp$Sampling_List_Corrected, by=list(Sampling_List_Corrected = InterpolSamplingCountryPairsCount_temp$Sampling_List_Corrected), FUN=length)
#select the top 100 Sampling_List_Corrected appearing in list
InterpolSamplingCountryPairsCount_temp <- top_n(InterpolSamplingCountryPairsCount_temp,3)
InterpolSamplingCountryPairsCount_temp$Country <- InterpolSamplingCountrySubset[i]
InterpolSamplingCountryPairsCount_temp <- InterpolSamplingCountryPairsCount_temp %>%
select(Country,Sampling_List_Corrected,x)
# if the merged dataset doesn't exist, create it
if (!exists("InterpolSamplingCountryPairsCountSubset")){
InterpolSamplingCountryPairsCountSubset <- InterpolSamplingCountryPairsCount_temp
# if the merged dataset does exist, append to it
}else {InterpolSamplingCountryPairsCountSubset <-rbind(InterpolSamplingCountryPairsCountSubset, InterpolSamplingCountryPairsCount_temp)
}
}
names(InterpolSamplingCountryPairCountKeywordSubset)[3] <- "Frequency"
InterpolSamplingCountryPairsCountSubset <- full_join(InterpolSamplingCountryPairsCountSubset, InterpolSamplingCountryPairCountKeywordSubset)
InterpolSamplingCountryPairsCountSubset$x[!is.na(InterpolSamplingCountryPairsCountSubset$x)] <- "black"
InterpolSamplingCountryPairsCountSubset$x[is.na(InterpolSamplingCountryPairsCountSubset$x)] <- "white"
names(InterpolSamplingCountryPairsCountSubset)[3] <- "ColourCode"
InterpolSamplingCountryPairsCountSubset$Country <- as.factor(InterpolSamplingCountryPairsCountSubset$Country)
InterpolSamplingCountryPairsCountSubset$Sampling_List_Corrected <- as.factor(InterpolSamplingCountryPairsCountSubset$Sampling_List_Corrected)
# ordering keywords in plot by most frequent across all countries
InterpolKeywordOrder <- aggregate(InterpolSamplingCountryPairsCountSubset$Sampling_List_Corrected, by=list(InterpolSamplingCountryPairsCountSubset$Sampling_List_Corrected), FUN=length)
InterpolSamplingCountryPairsCountSubset$InterpolKeywordOrder <-  gsr(as.character(InterpolSamplingCountryPairsCountSubset$Sampling_List_Corrected),as.character(InterpolKeywordOrder$Group.1),InterpolKeywordOrder$x)
InterpolSamplingCountryPairsCountSubset$InterpolKeywordOrder <- as.numeric(InterpolSamplingCountryPairsCountSubset$InterpolKeywordOrder)
# ordering countries by highest number of keywords
CountryOrder <- aggregate(InterpolSamplingCountryPairsCountSubset$Country, by=list(InterpolSamplingCountryPairsCountSubset$Country), FUN=length)
InterpolSamplingCountryPairsCountSubset$CountryOrder <-  gsr(as.character(InterpolSamplingCountryPairsCountSubset$Country),as.character(CountryOrder$Group.1),CountryOrder$x)
InterpolSamplingCountryPairsCountSubset$CountryOrder <- as.numeric(InterpolSamplingCountryPairsCountSubset$CountryOrder)
# this is to set the range for the keyword figure
InterpolSamplingCountryPairsCountSubset$groups <- cut(InterpolSamplingCountryPairsCountSubset$Frequency,               # Add group column
breaks = c(-1, 0, 1, 2, 5, 10, 50, 100, max(InterpolSamplingCountryPairsCountSubset$Frequency,na.rm = T)),
labels=c("0","1","2","3-5","6-10","11-50","51-100",">100"))
InterpolSamplingbyCountry_Graph <- InterpolSamplingCountryPairsCountSubset %>%
# convert state to factor and reverse order of levels
mutate(KeywordsCorrected=factor(Sampling_List_Corrected,levels=rev(sort(unique(Sampling_List_Corrected))))) %>%
# create a new variable from count
mutate(countfactor=cut(Frequency,breaks=c(-1, 0, 1, 2, 5, 10, 50, 100, max(Frequency,na.rm = T)),
labels=c("0","1","2","3-5","6-10","11-50","51-100",">100")))  %>%
# change level order
mutate(countfactor=factor(as.character(countfactor),levels=rev(levels(countfactor))))
InterpolKeywordOrder <- InterpolKeywordOrder %>%
arrange(desc(x),(Group.1))
InterpolKeywordOrder$Colour <- InterpolKeywordOrder$Group.1
InterpolKeywordOrder$Colour <- gsr(as.character(InterpolKeywordOrder$Colour),as.character(ExplosiveList$Corrected.Explosive),as.character(ExplosiveList$Colour))
# write.csv(InterpolSamplingbyCountry_Graph,file = "temp.csv",row.names = FALSE)
textcol <- "black"
InterpolSamplingbyCountryPlot <- ggplot(InterpolSamplingbyCountry_Graph,aes(x=reorder(Country, CountryOrder),y=reorder(Sampling_List_Corrected,desc(InterpolKeywordOrder)),fill=countfactor))+
geom_tile(colour=InterpolSamplingbyCountry_Graph$ColourCode,width=0.85, height=0.85, size=0.1) +
guides(fill=guide_legend(title="Count")) +
scale_fill_manual(values=c("#d53e4f","#f46d43","#fdae61","#fee08b","#d5ee52","#77c86c","#66afc6","#ddf1da", "#8968CD"),na.value = "grey90") +
theme(text = element_text(family = "sans"),
legend.position="right",legend.direction="vertical",
legend.title=element_text(colour=textcol),
legend.margin=margin(grid::unit(0,"cm")),
legend.text=element_text(colour=textcol,size=8),
legend.key.height=grid::unit(0.8,"cm"),
legend.key.width=grid::unit(0.2,"cm"),
axis.text.y=element_text(size=6, vjust=0.2, colour="black"),
axis.ticks=element_line(size=0.4),
plot.background=element_blank(),
panel.border=element_blank(),
plot.margin=margin(0.7,0.4,0.1,0.2,"cm"),
plot.title=element_text(colour=textcol,hjust=0,size=6),
axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.x = element_text(size=6, angle = 60, hjust=1))
show(InterpolSamplingbyCountryPlot)
#######################################################
#####       Interpol Explosive Keywords           #####
#####              vs Year    Plot                #####
#######################################################
#Split Column "Country" in row by the separator ",", remove leading white space to generate list
InterpolSamplingbyYear <- InterpolSampling %>%
mutate(Sampling_List_Corrected = strsplit(as.character(Sampling_List_Corrected), ";")) %>%
unnest(Sampling_List_Corrected) %>%
mutate_if(is.character, str_trim)
InterpolSamplingbyYear <- InterpolSamplingbyYear %>%
filter(between(Year,2001,2022))
# replace blank with NA
InterpolSamplingbyYear[InterpolSamplingbyYear=="NA"] <- NA
InterpolSamplingbyYear [InterpolSamplingbyYear==""] <- NA
# remove NA in Sampling_List_Corrected
InterpolSamplingbyYear <- InterpolSamplingbyYear[complete.cases(InterpolSamplingbyYear[ ,2]),]
InterpolSamplingbyYearCount <- aggregate(InterpolSamplingbyYear$Year, by=list(Year=InterpolSamplingbyYear$Year, Sampling_List_Corrected=InterpolSamplingbyYear$Sampling_List_Corrected), FUN=length)
# count the number of match to the Sampling_List_Corrected list
InterpolSamplingTotal <- InterpolSamplingbyYearCount %>%
group_by(Sampling_List_Corrected) %>%
summarise(x = sum(x))
# count the total number of match to the Sampling_List_Corrected list per year
InterpolSamplingYearTotal <- aggregate(InterpolSamplingbyYear$Year, by=list(InterpolSamplingbyYear$Year), FUN=length)
names(InterpolSamplingYearTotal)[1] <- c("Year")
names(InterpolSamplingYearTotal)[2] <- c("Total")
##### Count total number of papers per year ####
InterpolPapersbyYear <- Interpol_data %>%
select(Year) %>%
filter(between(Year,2001,2022))
InterpolPapersbyYear <- aggregate(InterpolPapersbyYear, by=list(Year=InterpolPapersbyYear$Year), FUN=length)
names(InterpolPapersbyYear)[2] <- c("Count")
names(InterpolSamplingTotal)[1] <- c("Sampling_List_Corrected")
# subset against the top list
InterpolSamplingbyYearCount <- subset(InterpolSamplingbyYearCount, InterpolSamplingbyYearCount$Sampling_List_Corrected %in% InterpolSamplingTotal$Sampling_List_Corrected)
# this is to set the range for the keyword figure
range <- as.numeric(max(InterpolSamplingbyYearCount$x, na.rm = TRUE))
source("Functions/KeywordRange.R")
InterpolSamplingbyYearCountGraph <- InterpolSamplingbyYearCount
InterpolSamplingbyYearCountGraph$YearTotal <- InterpolSamplingbyYearCountGraph$Year
InterpolSamplingbyYearCountGraph$YearTotal <- gsr(as.character(InterpolSamplingbyYearCountGraph$YearTotal),as.character(InterpolSamplingYearTotal$Year),as.character(InterpolSamplingYearTotal$Total))
names(InterpolSamplingbyYearCountGraph)[3] <- c("Count")
names(InterpolSamplingbyYearCountGraph)[4] <- c("YearTotal")
InterpolSamplingbyYearCountGraph$Percentage <- as.numeric(InterpolSamplingbyYearCountGraph$Count)/as.numeric(InterpolSamplingbyYearCountGraph$YearTotal)*100
InterpolSamplingbyYearCountGraph$YearTotal <- InterpolSamplingbyYearCountGraph$Year
InterpolSamplingbyYearCountGraph$YearTotal <- gsr(as.character(InterpolSamplingbyYearCountGraph$YearTotal),as.character(InterpolPapersbyYear$Year),as.character(InterpolPapersbyYear$Count))
InterpolSamplingbyYearCountGraph$YearTotal <-as.numeric(InterpolSamplingbyYearCountGraph$YearTotal)
# change level order
# mutate(countfactor=factor(as.character(countfactor),levels=rev(levels(countfactor))))
InterpolSamplingbyYearCountGraphReduced <- aggregate(InterpolSamplingbyYearCountGraph[, 1], list(InterpolSamplingbyYearCountGraph$Sampling_List_Corrected), min)
InterpolSamplingbyYearCountGraph$graphorder <- as.numeric(gsr(InterpolSamplingbyYearCountGraph$Sampling_List_Corrected,InterpolSamplingbyYearCountGraphReduced$Group.1,InterpolSamplingbyYearCountGraphReduced$x))
# further modified ggplot
InterpolTopExplosivesPlot <- ggplot(InterpolSamplingbyYearCountGraph,aes(x=Year))+
geom_line(aes(y=Count, color=Sampling_List_Corrected))+
labs(x="Year",y="Number of Mentions")+
scale_colour_manual(labels = c("Collection", "Headspace", "Recovery", "Sampling", "Swab", "Vacuum Collection", "Vapor Collection", "Vapour Sampling"), name = "Sampling Terms", values = c("#FF5D00","#FFB900","#00CC00","#008BFF","#8968CD") )+
scale_y_continuous()+
scale_x_continuous(breaks=c(2000,2002,2004,2006,2008,2010,2012,2014,2016,2018,2020,2022))+
#scale_fill_manual(values = c("#FF5D00","black","#00CC00","#008BFF","#8968CD"))+
theme_grey(base_size=8)+
theme(text = element_text(family = "sans"),
legend.position="right",legend.direction="vertical",
legend.margin=margin(grid::unit(0,"cm")),
legend.text=element_text(colour=textcol,size=10),
legend.key.height=grid::unit(1.2,"cm"),
legend.key.width=grid::unit(0.8,"cm"),
axis.text.x=element_text(size=7,colour=textcol),
axis.text.y=element_text(vjust=0.2,colour=textcol),
axis.ticks=element_line(size=0.4),
plot.background=element_blank(),
panel.border=element_blank(),
plot.margin=margin(-0.2,0.4,0.1,0.2,"cm"),
plot.title=element_text(colour=textcol,hjust=0,size=12))
#save figure
Var1 <- paste0("Fig_Interpol_Sampling_By_Year")
show(InterpolTopExplosivesPlot)
# further modified ggplot
InterpolTopExplosivesPlot <- ggplot(InterpolSamplingbyYearCountGraph,aes(x=Year))+
geom_line(aes(y=Count, color=Sampling_List_Corrected))+
labs(x="Year",y="Number of Mentions")+
scale_colour_manual(labels = c("Collection", "Headspace", "Recovery", "Sampling", "Swab", "Vacuum Collection", "Vapor Collection", "Vapour Sampling"), name = "Sampling Terms", values = c("#FF5D00","#FFB900","#00CC00","#008BFF","#8968CD","pink","green","yellow" ) )+
scale_y_continuous()+
scale_x_continuous(breaks=c(2000,2002,2004,2006,2008,2010,2012,2014,2016,2018,2020,2022))+
#scale_fill_manual(values = c("#FF5D00","black","#00CC00","#008BFF","#8968CD"))+
theme_grey(base_size=8)+
theme(text = element_text(family = "sans"),
legend.position="right",legend.direction="vertical",
legend.margin=margin(grid::unit(0,"cm")),
legend.text=element_text(colour=textcol,size=10),
legend.key.height=grid::unit(1.2,"cm"),
legend.key.width=grid::unit(0.8,"cm"),
axis.text.x=element_text(size=7,colour=textcol),
axis.text.y=element_text(vjust=0.2,colour=textcol),
axis.ticks=element_line(size=0.4),
plot.background=element_blank(),
panel.border=element_blank(),
plot.margin=margin(-0.2,0.4,0.1,0.2,"cm"),
plot.title=element_text(colour=textcol,hjust=0,size=12))
#save figure
Var1 <- paste0("Fig_Interpol_Sampling_By_Year")
show(InterpolTopExplosivesPlot)
#######################################################
######                 Keywords                  ######
#######################################################
#######################################################
######          Scopus Reference List            ######
######              Figure 1                     ######
#######################################################
#####                  Scopus Data                #####
Scopus_Fig1_Data <- Scopus_data
#############################################################
#####                  Data cleansing                   #####
#############################################################
#Correction to the keywords can be applied at this stage. This can be done in Notepad++, Excel etc. The ultimate order of the list must be kept so it can be binded to the orignial data.
#read the corrected list of keywords and combine it to the original list
ScopusKeywordList$KeywordsCorrected <- gsr(as.character(ScopusKeywordList$AIKeywords),as.character(KeywordCorrectionList$AIKeywords),as.character(KeywordCorrectionList$CorAIKeywordsAcronym))
ScopusKeywordListCollapsed <- ScopusKeywordList %>%
group_by(Title) %>%
summarize(KeywordsCorrected=paste0(KeywordsCorrected, collapse = ", "))
# number of distinct Keywords after correction
ScopusDistinctKeywordListCorrected <- ScopusKeywordList %>%
select(KeywordsCorrected) %>%
distinct()
#############################################################
#####               Data analysis - Keywords            #####
#############################################################
#Count to number of time the same year is repeated in the "DatasetKeywordList$Year" and save in a data.frame "Year"
ScopusPublicationYear<- data.frame(table(Scopus_Fig1_Data$Year))
names(ScopusPublicationYear) <- c("Year","Publications")
ScopusPublicationYear$Year <- as.numeric(as.character(ScopusPublicationYear$Year))
#count the number of keywords per title paper
ScopusKeywordList_KeywordsPerTitle <- ScopusKeywordList  %>%
select(Year,Title,Source.title,KeywordsCorrected) %>%
distinct()
ScopusKeywordList_KeywordsPerTitle[ScopusKeywordList_KeywordsPerTitle==""] <- NA
ScopusKeywordList_KeywordsPerTitle <-ScopusKeywordList_KeywordsPerTitle[complete.cases(ScopusKeywordList_KeywordsPerTitle[ ,4]), ]
sum(is.na(ScopusKeywordList$KeywordsCorrected))
ScopusKeywordYearCount <- aggregate(ScopusKeywordList_KeywordsPerTitle$Year, by=list(Year=ScopusKeywordList_KeywordsPerTitle$Year, Keyword=ScopusKeywordList_KeywordsPerTitle$KeywordsCorrected), FUN=length)
ScopusKeywordTotalCount <- aggregate(ScopusKeywordList_KeywordsPerTitle$Year, by=list(Keyword=ScopusKeywordList_KeywordsPerTitle$KeywordsCorrected), FUN=length)
# narrowing range for plot
ScopusKeywordNarrowRangeGraph <- top_n(ScopusKeywordTotalCount, Count)
# count the number of rows, hence the number of keywords in figure
a <- nrow(ScopusKeywordNarrowRangeGraph)
while (a>maximum) {
Count <- Count-1
ScopusKeywordNarrowRangeGraph <- top_n(ScopusKeywordTotalCount, Count)
a <- nrow(ScopusKeywordNarrowRangeGraph)
}
# DatasetKeywordNarrowRangeGraph <- subset(DatasetKeywordTotalCount,x>Count)
SubsetScopusKeywordNarrowRangeGraph <-subset(ScopusKeywordYearCount,Keyword %in% ScopusKeywordNarrowRangeGraph$Keyword)
# this is to set the range for the keyword figure
range <- as.numeric(max(SubsetScopusKeywordNarrowRangeGraph$x, na.rm = TRUE))
source("Functions/KeywordRange.R")
#############################################################
#####                      GRAPH                        #####
#############################################################
# Create a new variable from incidence (breaks to be changed to fit Scopus vs. Scopus data)
#Breaks and labels for Scopus
SubsetScopusKeywordNarrowRangeGraph$Incidenceweight <- cut(SubsetScopusKeywordNarrowRangeGraph$x,
breaks = c(BreakRange,max(SubsetScopusKeywordNarrowRangeGraph$x,na.rm=T)),
labels=DatasetRange)
ScopusTopKeywordsGraph <- SubsetScopusKeywordNarrowRangeGraph %>%
# convert state to factor and reverse order of levels
mutate(KeywordsCorrected=factor(Keyword,levels=rev(sort(unique(Keyword))))) %>%
# create a new variable from count
mutate(countfactor=cut(x,breaks=c(BreakRange,max(x,na.rm=T)),
labels=DatasetRange))  %>%
# change level order
mutate(countfactor=factor(as.character(countfactor),levels=rev(levels(countfactor))))
ScopusTopKeywordsGraphReduced <- aggregate(ScopusTopKeywordsGraph[, 1], list(ScopusTopKeywordsGraph$KeywordsCorrected), min)
ScopusTopKeywordsGraph$graphorder <- as.numeric(gsr(ScopusTopKeywordsGraph$KeywordsCorrected,ScopusTopKeywordsGraphReduced$Group.1,ScopusTopKeywordsGraphReduced$x))
# further modified ggplot
ScopusKeywordPlot <- ggplot(ScopusTopKeywordsGraph,aes(x=Year,y=reorder(KeywordsCorrected,graphorder),fill=countfactor))+
geom_tile(colour="white",size=0.2)+
guides(fill=guide_legend(title="Count"))+
labs(x="Year",y="",title="")+
scale_y_discrete(expand=c(0,0))+
scale_x_continuous(breaks=c(1960,1970,1980,1990,2000,2010,2020))+
scale_fill_manual(values=c(pal),na.value = "grey90")+
#coord_fixed()+
theme_grey(base_size=6)+
theme(text = element_text(family = "sans"),
legend.position="right",legend.direction="vertical",
legend.title=element_text(colour=textcol),
legend.margin=margin(grid::unit(0,"cm")),
legend.text=element_text(colour=textcol,size=6),
legend.key.height=grid::unit(0.8,"cm"),
legend.key.width=grid::unit(0.2,"cm"),
axis.text.x=element_text(size=6,colour=textcol),
axis.text.y=element_text(size=6,vjust=0.2,colour=textcol),
axis.ticks=element_line(size=0.4),
plot.background=element_blank(),  # element_rect(fill, colour, size, linetype, color))
panel.border=element_blank(),
plot.margin=margin(0.2,0.2,0.2,0.2,"cm"),
plot.title=element_text(colour=textcol,hjust=0,size=6))
#save figure
Var1 <- paste0("Fig_1_Scopus_",KeywordEntries)
ggsave(paste0(Figure.dir,sprintf("%s.tiff",Var1)), ScopusKeywordPlot, width = 14, height = 20, units = "cm", dpi=600)
show(ScopusKeywordPlot)
#Export to top keywords list
write.csv(SubsetScopusKeywordNarrowRangeGraph, file=paste0(Results.dir,sprintf("%s.csv",Var1)), row.names = F)
print("Processing complete. Please check 'Results/' and 'Figures/' folders for output")
View(ScopusKeywordList)
View(ScopusKeywordList_KeywordsPerTitle)
View(ScopusKeywordListCollapsed)
View(ScopusKeywords)
View(ScopusTopKeywordsGraphReduced)
View(ScopusKeywordTotalCount)
View(Scopus_data)
